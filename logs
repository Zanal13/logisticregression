settings.py

from datetime import datetime
from pathlib import Path
from .log_settings import *
current_date = datetime.now().strftime("%Y-%m-%d")
tomorrow_date = "2023-09-04"


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, f'{tomorrow_date}.log'),
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'WARNING',
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s - %(levelname)s - %(message)s',
        },
    },
}


==========================
log_settings.py

import logging
import os
import zipfile
from datetime import datetime, timedelta

LOG_DIR = '/Users/Ramoji/Desktop/project/filters/myapp'

def create_zip_file(log_file):
    zip_file_path = log_file + '.zip'
    with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        zipf.write(log_file, os.path.basename(log_file))
    os.remove(log_file)

def configure_logger():
    log_filename = datetime.now().strftime("%Y-%m-%d") + '.log'
    log_path = os.path.join(LOG_DIR, log_filename)

    # Create the log directory if it doesn't exist
    os.makedirs(LOG_DIR, exist_ok=True)

    # Create a logger instance
    logger = logging.getLogger('')
    logger.setLevel(logging.DEBUG)

    # Create a console handler
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)
    console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

    # Create a file handler
    file_handler = logging.FileHandler(log_path)
    file_handler.setLevel(logging.DEBUG)
    file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)

    # Set logger propagation to True
    logger.propagate = True

    # Remove old log files and convert them to zip files
    for filename in os.listdir(LOG_DIR):
        if filename.endswith('.log') and filename != log_filename:
            file_path = os.path.join(LOG_DIR, filename)
            modified_date = datetime.fromtimestamp(os.path.getmtime(file_path))
            if modified_date < datetime.now() - timedelta(days=30):
                create_zip_file(file_path)

configure_logger()



=======================
models.py

from django.db import models
import logging
logger = logging.getLogger(__name__)


class YourModel(models.Model):
    print('hello')
    logger.info("this is a log message")
    logger.info('This is a log message from a.py')
    logger.error("no error")
    logger.info("info")
    logger.error("error")
    logger.warning("warning")
    a="critical" + " - " + "ramoji"
    logger.critical(a)
    
    
    

logger.info("this is of log message")


